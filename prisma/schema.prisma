generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_PRISMA_URL")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  code      String
  userId    String
  email     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                  @id @unique @default(cuid())
  name                   String?
  email                  String?                 @unique
  emailVerified          Boolean?                @default(false)
  picture                String?
  githubId               Int?                    @unique
  googleId               String?                 @unique
  role                   Role                    @default(USER)
  stripeCustomerId       String?                 @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?                 @unique @map("stripe_subscription_id")
  stripePriceId          String?                 @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime?               @map("stripe_current_period_end")
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  dailyGameProgress      DailyGameProgress[]
  emailVerificationCodes EmailVerificationCode[]
  hostedLobbies          Lobby[]                 @relation("LobbyHost")
  lobbyParticipations    LobbyPlayer[]           @relation("LobbyParticipant")
  sessions               Session[]
  supportMessages        SupportMessage[]
}

model DailyImage {
  id                String                 @id @default(cuid())
  cloudinaryUrl     String
  year              Int
  description       String?
  tip               Json?
  date              DateTime               @unique @db.Date
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  gameProgress      DailyGameProgress[]
  multiplayerRounds MultiplayerGameRound[] @relation("MultiplayerRoundImages")
}

model DailyGameProgress {
  id         String     @id @default(cuid())
  userId     String?
  sessionId  String?
  imageId    String
  attempts   Int        @default(0)
  completed  Boolean    @default(false)
  won        Boolean    @default(false)
  winAttempt Int?
  date       DateTime   @db.Date
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  image      DailyImage @relation(fields: [imageId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, imageId])
  @@unique([userId, date])
  @@unique([sessionId, date])
}

model SupportMessage {
  id        String   @id @default(cuid())
  userId    String?
  name      String
  email     String
  subject   String
  message   String
  status    String   @default("open")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
}

model Lobby {
  id                 String                 @id @default(cuid())
  name               String
  description        String?
  isOpen             Boolean                @default(true)
  maxPlayers         Int                    @default(4)
  rounds             Int                    @default(3)
  roundTimer         Int                    @default(60)
  betweenRoundsTimer Int                    @default(5)
  gameMode           GameMode               @default(CLASSIC)
  status             LobbyStatus            @default(WAITING)
  currentRound       Int                    @default(0)
  hostUserId         String
  hintsEnabled       Boolean                @default(false)
  targetScore        Int?
  inviteCode         String?                @unique
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  host               User                   @relation("LobbyHost", fields: [hostUserId], references: [id], onDelete: Cascade)
  chatMessages       LobbyMessage[]
  players            LobbyPlayer[]
  gameRounds         MultiplayerGameRound[]
}

model LobbyPlayer {
  id           String             @id @default(cuid())
  lobbyId      String
  userId       String?
  sessionId    String?
  username     String
  avatar       String?
  score        Int                @default(0)
  isReady      Boolean            @default(false)
  isEliminated Boolean            @default(false)
  streak       Int                @default(0)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  messages     LobbyMessage[]
  lobby        Lobby              @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
  user         User?              @relation("LobbyParticipant", fields: [userId], references: [id], onDelete: Cascade)
  reactions    LobbyReaction[]
  guesses      MultiplayerGuess[]

  @@unique([lobbyId, userId])
  @@unique([lobbyId, sessionId])
}

model MultiplayerGameRound {
  id          String             @id @default(cuid())
  lobbyId     String
  roundNumber Int
  imageId     String
  status      RoundStatus        @default(ACTIVE)
  startedAt   DateTime?
  endedAt     DateTime?
  timerEndsAt DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  image       DailyImage         @relation("MultiplayerRoundImages", fields: [imageId], references: [id], onDelete: Cascade)
  lobby       Lobby              @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
  guesses     MultiplayerGuess[]

  @@unique([lobbyId, roundNumber])
}

model MultiplayerGuess {
  id         String               @id @default(cuid())
  roundId    String
  playerId   String
  year       Int
  points     Int                  @default(0)
  speedBonus Int                  @default(0)
  accuracy   Int                  @default(0)
  createdAt  DateTime             @default(now())
  player     LobbyPlayer          @relation(fields: [playerId], references: [id], onDelete: Cascade)
  round      MultiplayerGameRound @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@unique([roundId, playerId])
}

model LobbyMessage {
  id        String       @id @default(cuid())
  lobbyId   String
  playerId  String?
  username  String
  message   String
  type      MessageType  @default(CHAT)
  createdAt DateTime     @default(now())
  lobby     Lobby        @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
  player    LobbyPlayer? @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model LobbyReaction {
  id         String      @id @default(cuid())
  lobbyId    String
  playerId   String
  roundId    String?
  emoji      String
  targetType String
  targetId   String?
  createdAt  DateTime    @default(now())
  player     LobbyPlayer @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, roundId, emoji])
}

enum Role {
  USER
  ADMIN
}

enum MessageType {
  CHAT
  SYSTEM
  QUICK_PHRASE
}

enum GameMode {
  CLASSIC
  ELIMINATION
  MARATHON
}

enum LobbyStatus {
  WAITING
  PLAYING
  FINISHED
}

enum RoundStatus {
  ACTIVE
  COMPLETED
}
